package proxy_pattern;

/*
 *Created by zx on 19-1-28
 *
 * 代理模式
 * 名称解释：为其他对象提供一种代理以控制对这个对象的访问
 * 以上解释是引自GOF所著的《Design Pattern》对命令模式的高度概括。
 *
 * 代理模式包含三种角色
 * 1.抽象主题(Subject):抽象主题是一个接口，该接口是对象和它的代理所共用的接口。
 * 2.实际主题(RealSubject):该类是抽象主题的实现类，该类的实例是代理对象所要代理的对象。
 * 3.代理(Proxy):代理是实现抽象主题接口的类该类含有主题接口声明的变量，该变量用来存放RealSubject的实例的引用，这样代理类的实例就可以
 *   访问RealSubject的方法，即可以控制它所代理对象的访问。
 *
 *代理模式还分为静态代理和动态代理，而动态代理则是带代码运行时通过反射来获取具体需要代理的对象。
 * 此外代理从范围上还可以分为：
 * 1.远程代理
 * 2.虚拟代理
 * 3.安全代理
 * 3.智能代理
 * 当创建一个对象需要你耗费很长时间 时就可以考虑用虚拟你代理了。
 *
 * 模式分析：
 * 优点：
 * 1.代理模式可以屏蔽用户真正请求的对象，使用户程序和真正的对象之间解耦。
 * 2.使用代理模式可以担当创建耗时的对象的替身。
 *
 * 以下以12306购票代理为例说明
 *
 */
public class ProxyPattern {

    public ProxyPattern() {
        ProxyBuy proxyBuy = new ProxyBuy();
        proxyBuy.buy("长沙");
    }
}
